#Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
# By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …

#By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
# find the sum of the even-valued terms.
from taketime import timer


#Min løsning
@timer
def fibonacci(maxValue):
    fullList = [1,2]
    evenList = [2]
    
    while True: #emulates do while
        tempValue = fullList[-1]+fullList[-2] 
        
        if tempValue>= maxValue:
            break

        if  tempValue % 2 == 0: 
            evenList.append(tempValue)

        fullList.append(tempValue)
    #print(evenList)
    #print(fullList)
    return sum(evenList)

print(fibonacci(4_000_000))

#Claus løsning
@timer
def calculate(max):
    # 2 even -> even
    # 1 un-even + 1 even -> un-even
    # 2 un-even -> even

    sum = 0
    fib = [1,2]
    while fib[-1] < max:

        if (fib[-2]%2==0 and fib[-1]%2==0) or (fib[-2]%2!=0 and fib[-1]%2!=0):
            sum += fib[-2] + fib[-1]
        fib.append(fib[-2] + fib[-1])

    return sum

print(calculate(4_000_000))